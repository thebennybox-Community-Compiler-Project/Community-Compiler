alphaChar = ? all alphabetic characters ? | "_";
numChar = ? all numeric characters ?;

identifier = alphaChar, {alphaChar | numChar}; (* Valid identifier *)
number = ["-"], (numChar - "0"), {numChar}, [".", numChar*]; (* Decimal number *)
operation =
("!" | "#" | "$" | "%" | "&" | "*" | "+" | "-" | "/" | ":" | "<" | "=" | ">" | "?" | "@" | "^" | "|" | "~")* - (* Buildup of operators *)
("=" | "//" | "/*" | "*/") (* Invalid or special *)
; (* all operators *)

type = identifier; (* Any type *)
parameter = identifier + ":", type; (* Parameter to function *)

comment = ("//", ? all characters ?, "\n") | ("/*", ? all characters ?, "*/");

vardef = ("var" | "let"), identifier; (* Beginning of variable definition *)
funcdef = ["infix" | "suffix" | "prefix"], "fn", identifier, "(", parameter, {",", parameter}, ")"; (* Beginning of function definition *)
opdef = ("infix" | "suffix" | "prefix"), "op", operator, "(", parameter, {",", parameter}, ")"; (* Beginning of function definition *)
definition = (vardef | funcdef), [":", type]; (* Full definition of either variable or function *)

if = "if", "(", expression, ")", statement; (* If statement *)

loop = "loop", "(",
(expression | (* loop(10) or loop(1==1) *)
((statement | ";"), [expression], ";", [statement - ";"]) | (* for-based loop *)
((identifier, [":", type], "in", identifier))), (* foreach-based loop *)
")", statement; (* Loop *)
funccall = identifier, "(", expression, {",", expression}, ")";

expression = (identifier | number | funccall,
[operation, expression]) |
(identifier, ((operator, "=") | "="), expression) |
(expression, "?", expression, ":", expression); (* Expression *)

statement = (
(
  (vardef, (":", type) | ("=", expression) | (":", type, "=", expression)) |
  (identifier, ((operator, "=") | "="), expression) |
  funccall | "continue" | "break" | ("return", expression)),
";") |
comment | if | loop | codeblock; (* Any valid statement *)

codeblock = "{", {statement}, [expression], "}"; (* Block of code *)

extern = "extern", ((funcdef, [":", type]) | ("{", [funcdef, [":", type], {"," funcdef, [":", type]}], "}")); (* Definition of external function(s) *)
structure = "struct", identifier, "{", [definition, {"," definition}], "}"; (* Structure *)
function = (["impl"], funcdef, [":", type], (codeblock | ("->", expression, ";"))) | (opdef, ":", type, (codeblock | ("->", expression, ";"))); (* Function *)

grammar = (extern | structure | function | comment)*; (* Entire file *)
