alphaChar = ? all alphabetic characters ?;
numChar = ? all numeric characters ?;
whitespace = ? all whitespace characters ?

identifier = alphaChar, {alphaChar | numChar}; (* Valid identifier *)
number = ["-"], (numChar - "0"), {numChar}, [".", numChar*]; (* Decimal number *)

type = identifier; (* Any type *)
parameter = identifier + ":", type; (* Parameter to function *)

comment = ("//", ? all characters ?, "\n") | ("/*", ? all characters ?, "*/")

vardef = ("var" | "let"), identifier; (* Beginning of variable definition *)
funcdef = "fn", identifier, "(", parameter, {",", parameter}, ")"; (* Beginning of function definition *)
definition = (vardef | funcdef), [":", type]; (* Full definition of either variable or function *)

if = "if", "(", expression, ")", statement; (* If statement *)
loop = "loop", "(",
(expression | (* loop(10) or loop(1==1) *)
(expression, "to", expression) | (*  *)
((statement | ";"), [expression], ";", [statement - ";"]) |
((identifier, [":", type], "in", identifier))),
")", statement; (* Loop *)
funccall = identifier, "(", expression, {",", expression}, ")";

expression = (identifier | number | funccall,
[("+" | "-" | "*" | "/" | "<<" | ">>" | "&" | "|" | "^" | "<" | "<=" | "==" | ">=" | ">" | "&&" | "||"), expression]) |
(identifier, ("+=" | "-=" | "*=" | "/=" | "<<=" | ">>=" | "&=" | "|=" | "^=", "="), expression); (* Expression *)

statement = (
(
  (vardef, (":", type) | ("=", expression) | (":", type, "=", expression)) |
  (identifier, "=", expression) |
  funccall | "continue" | "break" | ("return", expression)),
";") |
comment | if | loop | codeblock; (* Any valid statement *)

codeblock = "{", {statement}, "}"; (* Block of code *)

extern = "extern", ((funcdef, [":", type]) | ("{", [funcdef, [":", type], {"," funcdef, [":", type]}], "}")); (* Definition of external function(s) *)
structure = "struct", identifier, "{", [definition, {"," definition}], "}"; (* Structure *)
function = ["impl"], funcdef, (codeblock | ("->", expression)); (* Function *)

grammar = (extern | structure | function | comment | whitespace)*; (* Entire file *)
